{"version":3,"sources":["../src/ConfigFactory.js"],"names":["CONTAINER","ConfigFactory","constructor","container","set","get","initWith","value","config","clone","resolve","merge","createConfig","Array","isArray","from","x"],"mappings":";;;;;;;;;;AAAA;;AAIA;;;;AACA;;;;AACA;;;;AAEA;;;;AAIA,MAAMA,YAAY,uBAAlB;;AAEA;;;AAGA,MAAMC,aAAN,CAAoB;AAChB;;;;AAIAC,gBAAYC,SAAZ,EAAuB;AACnBH,kBAAUI,GAAV,CAAc,IAAd,EAAoBD,SAApB;AACH;;AAED;;;;AAIA,QAAIA,SAAJ,GAAgB;AACZ,eAAOH,UAAUK,GAAV,CAAc,IAAd,CAAP;AACH;;AAED;;;;;AAKAC,aAASC,KAAT,EAAgB;AACZ,YAAIC,MAAJ;;AAEA,YAAID,iCAAJ,EAA6B;AACzBC,qBAASD,MAAME,KAAN,EAAT;AACH,SAFD,MAEO;AACHD,qBAAS,KAAKL,SAAL,CAAeO,OAAf,mBAA+BC,KAA/B,CAAqCJ,KAArC,CAAT;AACH;;AAED,eAAOC,MAAP;AACH;;AAED;;;;AAIAI,iBAAaL,KAAb,EAAoB;AAChB,YAAIC,MAAJ;;AAEA,YAAI,wBAAWD,KAAX,CAAJ,EAAuB;AACnBA,oBAAQA,sBAAR;AACH;;AAED,YAAIM,MAAMC,OAAN,CAAcP,KAAd,CAAJ,EAA0B;AACtBC,qBAAS,qBAAWO,IAAX,CAAgBR,KAAhB,EAAuBS,KAAK,KAAKV,QAAL,CAAcU,CAAd,CAA5B,CAAT;AACH,SAFD,MAEO,IAAI,sBAAST,KAAT,CAAJ,EAAqB;AACxBC,qBAAS,KAAKF,QAAL,CAAcC,KAAd,CAAT;AACH;;AAED,eAAOC,MAAP;AACH;AApDe;;kBAuDLP,a","file":"ConfigFactory.js","sourcesContent":["import {\n    isFunction,\n    isObject\n} from 'lodash';\nimport Config from './Config';\nimport ConfigList from './ConfigList';\nimport { env } from './ConfigArgv';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst CONTAINER = new WeakMap();\n\n/**\n * @class\n */\nclass ConfigFactory {\n    /**\n     * @constructor\n     * @param {ConfigContainer} container\n     */\n    constructor(container) {\n        CONTAINER.set(this, container);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigContainer}\n     */\n    get container() {\n        return CONTAINER.get(this);\n    }\n\n    /**\n     * @private\n     * @param {Object|Config} value\n     * @returns {Config}\n     */\n    initWith(value) {\n        let config;\n\n        if (value instanceof Config) {\n            config = value.clone();\n        } else {\n            config = this.container.resolve(Config).merge(value);\n        }\n\n        return config;\n    }\n\n    /**\n     * @param {Function|Object|Object[]} value\n     * @returns {Config|ConfigList}\n     */\n    createConfig(value) {\n        let config;\n\n        if (isFunction(value)) {\n            value = value(env);\n        }\n\n        if (Array.isArray(value)) {\n            config = ConfigList.from(value, x => this.initWith(x));\n        } else if (isObject(value)) {\n            config = this.initWith(value);\n        }\n\n        return config;\n    }\n}\n\nexport default ConfigFactory;\n"]}