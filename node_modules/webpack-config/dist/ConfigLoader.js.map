{"version":3,"sources":["../src/ConfigLoader.js"],"names":["PATH_RESOLVER","CACHE","FACTORY","ConfigLoader","constructor","pathResolver","cache","factory","set","get","loadConfig","filename","resolve","config","createConfig"],"mappings":";;;;;;;;;;AAAA;;;;AAIA;;;;AAIA,MAAMA,gBAAgB,uBAAtB;;AAEA;;;;AAIA,MAAMC,QAAQ,uBAAd;;AAEA;;;;AAIA,MAAMC,UAAU,uBAAhB;;AAEA;;;AAGA,MAAMC,YAAN,CAAmB;AACf;;;;;;AAMAC,cAAYC,YAAZ,EAA0BC,KAA1B,EAAiCC,OAAjC,EAA0C;AACtCP,kBAAcQ,GAAd,CAAkB,IAAlB,EAAwBH,YAAxB;AACAJ,UAAMO,GAAN,CAAU,IAAV,EAAgBF,KAAhB;AACAJ,YAAQM,GAAR,CAAY,IAAZ,EAAkBD,OAAlB;AACH;;AAED;;;;AAIA,MAAIF,YAAJ,GAAmB;AACf,WAAOL,cAAcS,GAAd,CAAkB,IAAlB,CAAP;AACH;;AAED;;;;AAIA,MAAIH,KAAJ,GAAY;AACR,WAAOL,MAAMQ,GAAN,CAAU,IAAV,CAAP;AACH;;AAED;;;;AAIA,MAAIF,OAAJ,GAAc;AACV,WAAOL,QAAQO,GAAR,CAAY,IAAZ,CAAP;AACH;;AAED;;;;AAIAC,aAAWC,QAAX,EAAqB;AACjBA,eAAW,KAAKN,YAAL,CAAkBO,OAAlB,CAA0BD,QAA1B,CAAX;;AAEA,QAAIE,SAAS,KAAKP,KAAL,CAAWG,GAAX,CAAeE,QAAf,CAAb;;AAEA,QAAIE,MAAJ,EAAY;AACRA,eAAS,KAAKN,OAAL,CAAaO,YAAb,CAA0BD,MAA1B,CAAT;AACH;;AAED,QAAIA,UAAU,CAAC,sBAASA,OAAOF,QAAhB,CAAf,EAA0C;AACtCE,aAAOF,QAAP,GAAkBA,QAAlB;AACH;;AAED,WAAOE,MAAP;AACH;AAvDc;;kBA0DJV,Y","file":"ConfigLoader.js","sourcesContent":["import {\n    isString\n} from 'lodash';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst PATH_RESOLVER = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst CACHE = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst FACTORY = new WeakMap();\n\n/**\n * @class\n */\nclass ConfigLoader {\n    /**\n     * @constructor\n     * @param {ConfigPathResolver} pathResolver\n     * @param {ConfigCache} cache\n     * @param {ConfigFactory} factory\n     */\n    constructor(pathResolver, cache, factory) {\n        PATH_RESOLVER.set(this, pathResolver);\n        CACHE.set(this, cache);\n        FACTORY.set(this, factory);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigPathResolver}\n     */\n    get pathResolver() {\n        return PATH_RESOLVER.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigCache}\n     */\n    get cache() {\n        return CACHE.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigFactory}\n     */\n    get factory() {\n        return FACTORY.get(this);\n    }\n\n    /**\n     * @param {String} filename\n     * @returns {Config|ConfigList}\n     */\n    loadConfig(filename) {\n        filename = this.pathResolver.resolve(filename);\n\n        let config = this.cache.get(filename);\n\n        if (config) {\n            config = this.factory.createConfig(config);\n        }\n\n        if (config && !isString(config.filename)) {\n            config.filename = filename;\n        }\n\n        return config;\n    }\n}\n\nexport default ConfigLoader;\n"]}