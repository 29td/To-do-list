{"version":3,"sources":["../src/ConfigExtendCommand.js"],"names":["LOADER","FACTORY","ConfigExtendCommand","constructor","optionsResolver","loader","factory","set","get","execute","config","options","normalizedOptions","normalizeOptions","forEach","value","resolve","filename","transforms","pendingConfig","loadConfig","dependencyTree","children","push","prevConfig","clone","transform","currConfig","call","createConfig","merge","toObject","Array","isArray"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;AAIA;;;;AAIA;;;;AAIA,MAAMA,SAAS,uBAAf;;AAEA;;;;AAIA,MAAMC,UAAU,uBAAhB;;AAEA;;;;AAIA,MAAMC,mBAAN,iCAAgD;AAC5C;;;;;;AAMAC,gBAAYC,eAAZ,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8C;AAC1C,cAAMF,eAAN;;AAEAJ,eAAOO,GAAP,CAAW,IAAX,EAAiBF,MAAjB;AACAJ,gBAAQM,GAAR,CAAY,IAAZ,EAAkBD,OAAlB;AACH;;AAED;;;;AAIA,QAAID,MAAJ,GAAa;AACT,eAAOL,OAAOQ,GAAP,CAAW,IAAX,CAAP;AACH;;AAED;;;;AAIA,QAAIF,OAAJ,GAAc;AACV,eAAOL,QAAQO,GAAR,CAAY,IAAZ,CAAP;AACH;;AAED;;;AAGAC,YAAQC,MAAR,EAAgBC,OAAhB,EAAyB;AACrB,cAAMC,oBAAoBV,oBAAoBW,gBAApB,CAAqCF,OAArC,CAA1B;;AAEAC,0BAAkBE,OAAlB,CAA0BC,SAAS;AAAA,wCACE,KAAKX,eAAL,CAAqBY,OAArB,CAA6BN,MAA7B,EAAqCK,KAArC,CADF;;AAAA,kBACvBE,QADuB,yBACvBA,QADuB;AAAA,kBACbC,UADa,yBACbA,UADa;;AAE/B,kBAAMC,gBAAgB,KAAKd,MAAL,CAAYe,UAAZ,CAAuBH,QAAvB,CAAtB;;AAEA,gBAAIE,yCAAJ,EAAqC;AACjCT,uBAAOW,cAAP,CAAsBC,QAAtB,CAA+BC,IAA/B,CAAoCJ,cAAcE,cAAlD;;AAEA,oBAAIG,aAAaL,cAAcM,KAAd,EAAjB;;AAEAP,2BAAWJ,OAAX,CAAmBY,aAAa;AAC5B,0BAAMC,aAAaD,UAAUE,IAAV,CAAelB,MAAf,EAAuBc,UAAvB,CAAnB;;AAEA,wBAAI,CAAC,sBAASG,UAAT,CAAL,EAA2B;AACvBH,qCAAa,EAAb;AACH,qBAFD,MAEO;AACHA,qCAAaG,UAAb;AACH;;AAED,wBAAI,EAAEH,sCAAF,CAAJ,EAAqC;AACjCA,qCAAa,KAAKlB,OAAL,CAAauB,YAAb,CAA0B,EAA1B,EAA8BC,KAA9B,CAAoCN,UAApC,CAAb;AACH;AACJ,iBAZD;;AAcA,oBAAIA,sCAAJ,EAAkC;AAC9Bd,2BAAOoB,KAAP,CAAaN,WAAWO,QAAX,EAAb;AACH;AACJ;AACJ,SA3BD;AA4BH;;AAED;;;;AAIA,WAAOlB,gBAAP,CAAwBF,OAAxB,EAAiC;AAC7B,YAAIC,oBAAoB,EAAxB;;AAEA,YAAI,sBAASD,OAAT,CAAJ,EAAuB;AACnBC,gCAAoB,CAAC;AACjBK,0BAAUN,OADO;AAEjBO,4BAAY;AAFK,aAAD,CAApB;AAOH,SARD,MAQO,IAAI,sBAASP,OAAT,CAAJ,EAAuB;AAAA;AAAA;AAAA;;AAAA;AAC1B,gEAAoC,uBAAeA,OAAf,CAApC,4GAA6D;AAAA;;AAAA;;AAAA,0BAAjDM,QAAiD;AAAA,0BAAvCS,SAAuC;;AACzD,0BAAMR,aAAac,MAAMC,OAAN,CAAcP,SAAd,IAA2BA,SAA3B,GAAuC,CAACA,SAAD,CAA1D;;AAEAd,sCAAkBW,IAAlB,CAAuB;AACnBN,gCADmB;AAEnBC,oCAAY,CACR,GAAGA,UADK;AAFO,qBAAvB;AAOH;AAXyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAY7B;;AAED,eAAON,iBAAP;AACH;AAhG2C;;kBAmGjCV,mB","file":"ConfigExtendCommand.js","sourcesContent":["import {\n    isObject,\n    isString\n} from 'lodash';\nimport Config from './Config';\nimport ConfigCommand from './ConfigCommand';\nimport DEFAULT_TRANSFORM from './ConfigDefaultTransform';\nimport CLEANUP_TRANSFORM from './ConfigCleanupTransform';\n\n/**\n * @typedef {Object<String,ConfigTransform[]>} ConfigExtendOptions\n */\n\n/**\n * @typedef {String|Object<String,ConfigTransform>|ConfigExtendOptions} ConfigExtendPossibleOptions\n */\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst LOADER = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst FACTORY = new WeakMap();\n\n/**\n * @class\n * @extends {ConfigCommand}\n */\nclass ConfigExtendCommand extends ConfigCommand {\n    /**\n     * @constructor\n     * @param {ConfigOptionsResolver} optionsResolver\n     * @param {ConfigLoader} loader\n     * @param {ConfigFactory} factory\n     */\n    constructor(optionsResolver, loader, factory) {\n        super(optionsResolver);\n\n        LOADER.set(this, loader);\n        FACTORY.set(this, factory);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigLoader}\n     */\n    get loader() {\n        return LOADER.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigFactory}\n     */\n    get factory() {\n        return FACTORY.get(this);\n    }\n\n    /**\n     * @override\n     */\n    execute(config, options) {\n        const normalizedOptions = ConfigExtendCommand.normalizeOptions(options);\n\n        normalizedOptions.forEach(value => {\n            const { filename, transforms } = this.optionsResolver.resolve(config, value);\n            const pendingConfig = this.loader.loadConfig(filename);\n\n            if (pendingConfig instanceof Config) {\n                config.dependencyTree.children.push(pendingConfig.dependencyTree);\n\n                let prevConfig = pendingConfig.clone();\n\n                transforms.forEach(transform => {\n                    const currConfig = transform.call(config, prevConfig);\n\n                    if (!isObject(currConfig)) {\n                        prevConfig = {};\n                    } else {\n                        prevConfig = currConfig;\n                    }\n\n                    if (!(prevConfig instanceof Config)) {\n                        prevConfig = this.factory.createConfig({}).merge(prevConfig);\n                    }\n                });\n\n                if (prevConfig instanceof Config) {\n                    config.merge(prevConfig.toObject());\n                }\n            }\n        });\n    }\n\n    /**\n     * @param {ConfigExtendPossibleOptions} options\n     * @returns {ConfigExtendOptions[]}\n     */\n    static normalizeOptions(options) {\n        let normalizedOptions = [];\n\n        if (isString(options)) {\n            normalizedOptions = [{\n                filename: options,\n                transforms: [\n                    DEFAULT_TRANSFORM,\n                    CLEANUP_TRANSFORM\n                ]\n            }];\n        } else if (isObject(options)) {\n            for (const [filename, transform] of Object.entries(options)) {\n                const transforms = Array.isArray(transform) ? transform : [transform];\n\n                normalizedOptions.push({\n                    filename,\n                    transforms: [\n                        ...transforms,\n                        CLEANUP_TRANSFORM\n                    ]\n                });\n            }\n        }\n\n        return normalizedOptions;\n    }\n}\n\nexport default ConfigExtendCommand;\n"]}