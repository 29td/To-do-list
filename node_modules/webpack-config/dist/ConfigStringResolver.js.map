{"version":3,"sources":["../src/ConfigStringResolver.js"],"names":["ENVIRONMENT","PATTERN_CACHE","ConfigStringResolver","constructor","environment","patternCache","set","get","resolve","value","options","keys","key","valueOf","resolvedValue","eval","err"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;AAIA,MAAMA,cAAc,uBAApB;;AAEA;;;;AAIA,MAAMC,gBAAgB,uBAAtB;;AAEA;;;AAGA,MAAMC,oBAAN,CAA2B;AACvB;;;;;AAKAC,gBAAYC,WAAZ,EAAyBC,YAAzB,EAAuC;AACnCL,oBAAYM,GAAZ,CAAgB,IAAhB,EAAsBF,WAAtB;AACAH,sBAAcK,GAAd,CAAkB,IAAlB,EAAwBD,YAAxB;AACH;;AAED;;;;AAIA,QAAID,WAAJ,GAAkB;AACd,eAAOJ,YAAYO,GAAZ,CAAgB,IAAhB,CAAP;AACH;;AAED;;;;AAIA,QAAIF,YAAJ,GAAmB;AACf,eAAOJ,cAAcM,GAAd,CAAkB,IAAlB,CAAP;AACH;;AAED;;;;AAIAC,YAAQC,KAAR,EAAe;AACX,cAAMC,UAAU,EAAhB;;AADW;AAAA;AAAA;;AAAA;AAGX,4DAAkB,KAAKN,WAAL,CAAiBO,IAAjB,EAAlB,4GAA2C;AAAA,sBAAhCC,GAAgC;;AACvCF,wBAAQE,GAAR,IAAe,KAAKR,WAAL,CAAiBS,OAAjB,CAAyBD,GAAzB,CAAf;AACH;AALU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOX,YAAIE,aAAJ;;AAEA,YAAI;AACAA,4BAAgB,KAAKT,YAAL,CAAkBU,IAAlB,CAAuBN,KAAvB,EAA8BC,OAA9B,CAAhB;AACH,SAFD,CAEE,OAAOM,GAAP,EAAY;AACVF,4BAAgBL,KAAhB;AACH;;AAED,eAAOK,aAAP;AACH;AA/CsB;;kBAkDZZ,oB","file":"ConfigStringResolver.js","sourcesContent":["/**\n* @private\n* @type {WeakMap}\n*/\nconst ENVIRONMENT = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst PATTERN_CACHE = new WeakMap();\n\n/**\n * @class\n */\nclass ConfigStringResolver {\n    /**\n     * @constructor\n     * @param {ConfigEnvironment} environment\n     * @param {ConfigPatternCache} patternCache\n     */\n    constructor(environment, patternCache) {\n        ENVIRONMENT.set(this, environment);\n        PATTERN_CACHE.set(this, patternCache);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigEnvironment}\n     */\n    get environment() {\n        return ENVIRONMENT.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigPatternCache}\n     */\n    get patternCache() {\n        return PATTERN_CACHE.get(this);\n    }\n\n    /**\n     * @param {String} value\n     * @returns {String}\n     */\n    resolve(value) {\n        const options = {};\n\n        for (const key of this.environment.keys()) {\n            options[key] = this.environment.valueOf(key);\n        }\n\n        let resolvedValue;\n\n        try {\n            resolvedValue = this.patternCache.eval(value, options);\n        } catch (err) {\n            resolvedValue = value;\n        }\n\n        return resolvedValue;\n    }\n}\n\nexport default ConfigStringResolver;\n"]}