{"version":3,"sources":["../src/Config.js"],"names":["commandNames","DEPENDENCY_TREE","COMMAND_FACTORY","Config","constructor","commandFactory","set","get","dependencyTree","has","value","defaults","values","invoke","DEFAULTS","merge","MERGE","extend","EXTEND","clone","config","children","toObject","properties","key","path","remove","toJSON"],"mappings":"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","file":"Config.js","sourcesContent":["import {\n    set,\n    unset,\n    get,\n    has\n} from 'lodash';\nimport ConfigDependency from './ConfigDependency';\nimport ConfigCommandInvoker from './ConfigCommandInvoker';\nimport * as commandNames from './ConfigCommandNames';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst DEPENDENCY_TREE = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst COMMAND_FACTORY = new WeakMap();\n\n/**\n * @class\n */\nclass Config {\n    /**\n     * @constructor\n     * @param {ConfigCommandFactory} commandFactory\n     */\n    constructor(commandFactory) {\n        COMMAND_FACTORY.set(this, commandFactory);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigCommandFactory}\n     */\n    get commandFactory() {\n        return COMMAND_FACTORY.get(this);\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * const config = new Config();\n     *\n     * config.extend('./test/fixtures/webpack.1.config.js');\n     *\n     * for (const {node} of config.dependencyTree) {\n     *   console.log(node.root.filename);\n     * }\n     * // ./test/fixtures/webpack.1.config.js\n     * // ./test/fixtures/webpack.2.config.js\n     * // ./test/fixtures/webpack.3.config.js\n     * // ./test/fixtures/webpack.5.config.js\n     * // ./test/fixtures/webpack.4.config.js\n     * @description Holds information about [included]{@link Config#extend} configs\n     * @readonly\n     * @type {ConfigDependency}\n     */\n    get dependencyTree() {\n        if (!DEPENDENCY_TREE.has(this)) {\n            DEPENDENCY_TREE.set(this, new ConfigDependency(this));\n        }\n\n        return DEPENDENCY_TREE.get(this);\n    }\n\n    /**\n     * @private\n     * @param {ConfigDependency} value\n     */\n    set dependencyTree(value) {\n        DEPENDENCY_TREE.set(this, value);\n    }\n\n    /**\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().defaults({\n     *    debug: true\n     * }, {\n     *    profile: false\n     * });\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().defaults(() => {\n     *     return {\n     *         debug: true\n     *     };\n     * });\n     * @description Adds `values` if they are missing\n     * @param {...ConfigOptions} values\n     * @returns {Config}\n     */\n    defaults(...values) {\n        return ConfigCommandInvoker.invoke(commandNames.DEFAULTS, this, ...values);\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().merge({\n     *    debug: true\n     * }, {\n     *    profile: false\n     * });\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().merge(() => {\n     *     return {\n     *         debug: true\n     *     };\n     * });\n     * @description Merges `values`\n     * @param {...ConfigOptions} values\n     * @returns {Config}\n     */\n    merge(...values) {\n        return ConfigCommandInvoker.invoke(commandNames.MERGE, this, ...values);\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().extend('./test/fixtures/webpack.1.config.js');\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * // Loads from `node_modules/react-redux/webpack.config.js`\n     * export default new Config().extend('react-redux/webpack.config.js');\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * // Loads from `node_modules/webpack-config-my/webpack.config.js`\n     * export default new Config().extend('my/webpack.config.js');\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().extend({\n     *    './test/fixtures/webpack.1.config.js': config => {\n     *        delete config.tags;\n     *\n     *        return config;\n     *    }\n     * });\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().extend({\n     *    './test/fixtures/webpack.1.config.js': [config => {\n     *        delete config.tags;\n     *\n     *        return config;\n     *    }, config => {\n     *        delete config.profile;\n     *\n     *        return config;\n     *    }]\n     * });\n     * @description Helps to extend config using local file or shareable config file which should be hosted under `node_modules`\n     * @param {...ConfigExtendPossibleOptions} values\n     * @returns {Config}\n     */\n    extend(...values) {\n        return ConfigCommandInvoker.invoke(commandNames.EXTEND, this, ...values);\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * const config = new Config();\n     *\n     * config.merge({\n     *   debug: true\n     * });\n     *\n     * console.log(config.clone());\n     * // Config { debug: true }\n     * @description Creates copy of {@link Config}\n     * @returns {Config}\n     */\n    clone() {\n        const config = new Config(this.commandFactory);\n\n        config.dependencyTree = new ConfigDependency(config, this.dependencyTree.children);\n\n        return config.merge(this.toObject());\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * const config = new Config();\n     *\n     * config.merge({\n     *   debug: true\n     * });\n     *\n     * console.log(config.toObject());\n     * // Object { debug: true }\n     * @description Returns plain `Object` representation of {@link Config}\n     * @returns {Object}\n     */\n    toObject() {\n        const properties = {};\n\n        for (const [key, value] of Object.entries(this)) {\n            if (this.has(key)) {\n                properties[key] = value;\n            }\n        }\n\n        return properties;\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * const config = new Config();\n     *\n     * config.set('debug', true);\n     *\n     * console.log(config.toObject());\n     * // Object { debug: true }\n     * @description Sets `value` at `path`\n     * @param {String} path\n     * @param {*} value\n     * @return {Config}\n     */\n    set(path, value) {\n        set(this, path, value);\n\n        return this;\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * const config = new Config();\n     *\n     * config.set('debug', true);\n     *\n     * console.log(config.get('debug'));\n     * // true\n     * @description Gets `value` at `path`\n     * @param {String} path\n     * @return {*}\n     */\n    get(path) {\n        return get(this, path);\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * const config = new Config();\n     *\n     * config.set('debug', true).remove('debug');\n     *\n     * console.log(config.get('debug'));\n     * // undefined\n     * @description Removes `value` at `path`\n     * @param {String} path\n     * @return {Config}\n     */\n    remove(path) {\n        unset(this, path);\n\n        return this;\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * const config = new Config();\n     *\n     * config.set('debug', true);\n     *\n     * console.log(config.has('debug'));\n     * // true\n     * @description Checks if `value` exist at `path`\n     * @param {String} path\n     * @return {Boolean}\n     */\n    has(path) {\n        return has(this, path);\n    }\n\n    /**\n     * @returns {Object}\n     */\n    toJSON() {\n        return this.toObject();\n    }\n}\n\nexport default Config;\n"]}