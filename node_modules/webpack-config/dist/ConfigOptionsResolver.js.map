{"version":3,"sources":["../src/ConfigOptionsResolver.js"],"names":["STRING_RESOLVER","ConfigOptionsResolver","constructor","stringResolver","set","get","valueOf","config","options","call","resolve","value","parent","node","key"],"mappings":";;;;;;;;;;;;;;AAAA;;AAIA;;;;;;AAEA;;;;;;;AAOA;;;;AAIA;;;;AAIA,MAAMA,kBAAkB,uBAAxB;;AAEA;;;AAGA,MAAMC,qBAAN,CAA4B;AACxB;;;;AAIAC,cAAYC,cAAZ,EAA4B;AACxBH,oBAAgBI,GAAhB,CAAoB,IAApB,EAA0BD,cAA1B;AACH;;AAED;;;;AAIA,MAAIA,cAAJ,GAAqB;AACjB,WAAOH,gBAAgBK,GAAhB,CAAoB,IAApB,CAAP;AACH;;AAED;;;;;;AAMA,SAAOC,OAAP,CAAeC,MAAf,EAAuBC,OAAvB,EAAgC;AAC5B,WAAO,wBAAWA,OAAX,IAAsBA,QAAQC,IAAR,CAAaF,MAAb,EAAqBA,MAArB,CAAtB,GAAqDC,OAA5D;AACH;;AAED;;;;;AAKAE,UAAQH,MAAR,EAAgBC,OAAhB,EAAyB;AACrB,UAAMG,QAAQV,sBAAsBK,OAAtB,CAA8BC,MAA9B,EAAsCC,OAAtC,CAAd;;AADqB;AAAA;AAAA;;AAAA;AAGrB,sDAAkC,gCAAsBG,KAAtB,EAA6B,CAA7B,EAAgC,IAAhC,CAAlC,4GAAyE;AAAA;AAAA,cAA7DC,MAA6D,QAA7DA,MAA6D;AAAA,cAArDC,IAAqD,QAArDA,IAAqD;AAAA,cAA/CC,GAA+C,QAA/CA,GAA+C;;AACrE,YAAI,sBAASD,IAAT,CAAJ,EAAoB;AAChBD,iBAAOE,GAAP,IAAc,KAAKX,cAAL,CAAoBO,OAApB,CAA4BG,IAA5B,CAAd;AACH;AACJ;AAPoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASrB,WAAOF,KAAP;AACH;AA1CuB;;kBA6CbV,qB","file":"ConfigOptionsResolver.js","sourcesContent":["import {\n    isFunction,\n    isString\n} from 'lodash';\nimport RecursiveIterator from 'recursive-iterator';\n\n/**\n * @function\n * @name ConfigTransform\n * @param {Config} config\n * @returns {Config|Object}\n */\n\n/**\n * @typedef {Object|ConfigTransform} ConfigOptions\n */\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst STRING_RESOLVER = new WeakMap();\n\n/**\n * @class\n */\nclass ConfigOptionsResolver {\n    /**\n     * @constructor\n     * @param {ConfigStringResolver} stringResolver\n     */\n    constructor(stringResolver) {\n        STRING_RESOLVER.set(this, stringResolver);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigStringResolver}\n     */\n    get stringResolver() {\n        return STRING_RESOLVER.get(this);\n    }\n\n    /**\n     * @private\n     * @param {Config} config\n     * @param {ConfigOptions} options\n     * @returns {Object}\n     */\n    static valueOf(config, options) {\n        return isFunction(options) ? options.call(config, config) : options;\n    }\n\n    /**\n     * @param {Config} config\n     * @param {ConfigOptions} options\n     * @returns {Object}\n     */\n    resolve(config, options) {\n        const value = ConfigOptionsResolver.valueOf(config, options);\n\n        for (const {parent, node, key} of new RecursiveIterator(value, 1, true)) {\n            if (isString(node)) {\n                parent[key] = this.stringResolver.resolve(node);\n            }\n        }\n\n        return value;\n    }\n}\n\nexport default ConfigOptionsResolver;\n"]}