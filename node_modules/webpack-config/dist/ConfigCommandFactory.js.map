{"version":3,"sources":["../src/ConfigCommandFactory.js"],"names":["CONTAINER","ConfigCommandFactory","constructor","container","set","get","createCommand","name","resolve"],"mappings":";;;;;;;;;;AAAA;;;;;;AAEA;;;;AAIA,MAAMA,YAAY,uBAAlB;;AAEA;;;AAGA,MAAMC,oBAAN,CAA2B;AACvB;;;;AAIAC,cAAYC,SAAZ,EAAuB;AACnBH,cAAUI,GAAV,CAAc,IAAd,EAAoBD,SAApB;AACH;;AAED;;;;AAIA,MAAIA,SAAJ,GAAgB;AACZ,WAAOH,UAAUK,GAAV,CAAc,IAAd,CAAP;AACH;;AAED;;;;;AAKAC,gBAAcC,IAAd,EAAoB;AAChB,WAAO,KAAKJ,SAAL,CAAeK,OAAf,CAAuB,6BAAMD,IAAN,CAAvB,CAAP;AACH;AAxBsB;;kBA2BZN,oB","file":"ConfigCommandFactory.js","sourcesContent":["import types from './ConfigCommandTypes';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst CONTAINER = new WeakMap();\n\n/**\n * @class\n */\nclass ConfigCommandFactory {\n    /**\n     * @constructor\n     * @param {ConfigContainer} container\n     */\n    constructor(container) {\n        CONTAINER.set(this, container);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigContainer}\n     */\n    get container() {\n        return CONTAINER.get(this);\n    }\n\n    /**\n     * Creates {@link ConfigCommand}\n     * @param {String} name\n     * @returns {ConfigCommand}\n     */\n    createCommand(name) {\n        return this.container.resolve(types[name]);\n    }\n}\n\nexport default ConfigCommandFactory;\n"]}