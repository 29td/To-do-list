{"version":3,"sources":["../src/ConfigPatternCache.js"],"names":["DEFAULT_INTERPOLATE","INTERPOLATE","ConfigPatternCache","constructor","interpolate","get","value","set","getOrSet","key","has","compile","eval","options","compiledTemplate"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AAIA;;;;AAIA,MAAMA,sBAAsB,gBAA5B;;AAEA;;;;AAIA,MAAMC,cAAc,uBAApB;;AAEA;;;;AAIA,MAAMC,kBAAN,uBAAqC;AACjC;;;;AAIAC,gBAAYC,cAAcJ,mBAA1B,EAA+C;AAC3C;;AAEA,aAAKI,WAAL,GAAmBA,WAAnB;AACH;;AAED;;;AAGA,QAAIA,WAAJ,GAAkB;AACd,eAAOH,YAAYI,GAAZ,CAAgB,IAAhB,CAAP;AACH;;AAED;;;;;;;;;AASA,QAAID,WAAJ,CAAgBE,KAAhB,EAAuB;AACnBL,oBAAYM,GAAZ,CAAgB,IAAhB,EAAsBD,KAAtB;AACH;;AAED;;;;AAIAE,aAASC,GAAT,EAAc;AACV,YAAI,CAAC,KAAKC,GAAL,CAASD,GAAT,CAAL,EAAoB;AAChB,iBAAKF,GAAL,CAASE,GAAT,EAAcA,GAAd;AACH;;AAED,eAAO,KAAKJ,GAAL,CAASI,GAAT,CAAP;AACH;;AAED;;;;;;AAMAF,QAAIE,GAAJ,EAASH,KAAT,EAAgB;AACZ,eAAO,MAAMC,GAAN,CAAUE,GAAV,EAAe,KAAKE,OAAL,CAAaL,KAAb,CAAf,CAAP;AACH;;AAED;;;;;AAKAM,SAAKN,KAAL,EAAYO,UAAU,EAAtB,EAA0B;AACtB,cAAMC,mBAAmB,KAAKN,QAAL,CAAcF,KAAd,CAAzB;;AAEA,eAAOQ,iBAAiBD,OAAjB,CAAP;AACH;;AAED;;;;AAIAF,YAAQL,KAAR,EAAe;AACX,eAAO,sBAASA,KAAT,EAAgB;AACnBF,yBAAa,KAAKA;AADC,SAAhB,CAAP;AAGH;AAxEgC;;kBA2EtBF,kB","file":"ConfigPatternCache.js","sourcesContent":["import {\n    template\n} from 'lodash';\n\n/**\n * @private\n * @type {RegExp}\n */\nconst DEFAULT_INTERPOLATE = /\\[([\\w\\s]+?)]/g;\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst INTERPOLATE = new WeakMap();\n\n/**\n * @class\n * @extends {Map}\n */\nclass ConfigPatternCache extends Map {\n    /**\n     * @constructor\n     * @param {RegExp} [interpolate=/\\[([\\w\\s]+?)]/g]\n     */\n    constructor(interpolate = DEFAULT_INTERPOLATE) {\n        super();\n\n        this.interpolate = interpolate;\n    }\n\n    /**\n     * @type {RegExp}\n     */\n    get interpolate() {\n        return INTERPOLATE.get(this);\n    }\n\n    /**\n     * @example\n     * import {\n     *   patternCache\n     * } from 'webpack-config';\n     *\n     * patternCache.interpolate = /{([\\w\\s]+?)}/g;\n     * @param {RegExp} value\n     */\n    set interpolate(value) {\n        INTERPOLATE.set(this, value);\n    }\n\n    /**\n     * @param {*} key\n     * @returns {RegExp}\n     */\n    getOrSet(key) {\n        if (!this.has(key)) {\n            this.set(key, key);\n        }\n\n        return this.get(key);\n    }\n\n    /**\n     * @override\n     * @param {*} key\n     * @param {String} value\n     * @returns {RegExp}\n     */\n    set(key, value) {\n        return super.set(key, this.compile(value));\n    }\n\n    /**\n     * @param {String} value\n     * @param {Object} options\n     * @returns {String}\n     */\n    eval(value, options = {}) {\n        const compiledTemplate = this.getOrSet(value);\n\n        return compiledTemplate(options);\n    }\n\n    /**\n     * @param {String} value\n     * @returns {Function}\n     */\n    compile(value) {\n        return template(value, {\n            interpolate: this.interpolate\n        });\n    }\n}\n\nexport default ConfigPatternCache;\n"]}