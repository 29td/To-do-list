{"version":3,"sources":["../src/ConfigDependencyIterator.js"],"names":["ConfigDependencyIterator","constructor","root","bypassMode","ignoreCircular","maxDeep","getStatesOfChildNodes","node","path","deep","children","map","child","getState","filename","concat"],"mappings":";;;;;;AAAA;;;;;;AAEA;;;;;AAKA;;;;AAIA,MAAMA,wBAAN,qCAAyD;AACrD;;;;;;;AAOAC,cAAYC,IAAZ,EAAkBC,aAAa,CAA/B,EAAkCC,iBAAiB,IAAnD,EAAyDC,OAAzD,EAAkE;AAC9D,UAAMH,IAAN,EAAYC,UAAZ,EAAwBC,cAAxB,EAAwCC,OAAxC;AACH;;AAED;;;AAGAC,wBAAsBC,IAAtB,EAA4BC,IAA5B,EAAkCC,IAAlC,EAAwC;AACpC,WAAOF,KAAKG,QAAL,CAAcC,GAAd,CAAkBC,SAAS,KAAKC,QAAL,CAAcN,IAAd,EAAoBK,KAApB,EAA2BA,MAAMV,IAAN,CAAWY,QAAtC,EAAgDN,KAAKO,MAAL,CAAYH,MAAMV,IAAN,CAAWY,QAAvB,CAAhD,EAAkFL,OAAO,CAAzF,CAA3B,CAAP;AACH;AAjBoD;;kBAoB1CT,wB","file":"ConfigDependencyIterator.js","sourcesContent":["import RecursiveIterator from 'recursive-iterator';\n\n/**\n * @external RecursiveIterator\n * @see https://github.com/nervgh/recursive-iterator\n */\n\n/**\n * @class\n * @extends {external:RecursiveIterator}\n */\nclass ConfigDependencyIterator extends RecursiveIterator {\n    /**\n     * @constructor\n     * @param {ConfigDependency} root\n     * @param {Number} [bypassMode=0]\n     * @param {Boolean} [ignoreCircular=true]\n     * @param {Number} [maxDeep]\n     */\n    constructor(root, bypassMode = 0, ignoreCircular = true, maxDeep) {\n        super(root, bypassMode, ignoreCircular, maxDeep);\n    }\n\n    /**\n     * @override\n     */\n    getStatesOfChildNodes(node, path, deep) {\n        return node.children.map(child => this.getState(node, child, child.root.filename, path.concat(child.root.filename), deep + 1));\n    }\n}\n\nexport default ConfigDependencyIterator;\n"]}