{"version":3,"sources":["../src/ConfigCache.js"],"names":["PERSISTENT_KEY","ENVIRONMENT","VALUE_RESOLVERS","ConfigCache","constructor","environment","valueResolvers","set","from","get","persistent","getOrDefault","value","key","has","require","cache","resolve","x"],"mappings":";;;;;;;;;;;;;;AAAA;;AAGA;;;;AACA;;;;;;AAEA;;;;AAIA,MAAMA,iBAAiB,sBAAvB;;AAEA;;;;AAIA,MAAMC,cAAc,uBAApB;;AAEA;;;;AAIA,MAAMC,kBAAkB,uBAAxB;;AAEA;;;;;AAKA,MAAMC,WAAN,uBAA8B;AAC1B;;;;;AAKAC,gBAAYC,WAAZ,EAAyBC,+CAAzB,EAA6D;AACzD;;AAEAL,oBAAYM,GAAZ,CAAgB,IAAhB,EAAsBF,WAAtB;AACAH,wBAAgBK,GAAhB,CAAoB,IAApB,EAA0B,6BAAmBC,IAAnB,CAAwBF,cAAxB,CAA1B;AACH;;AAED;;;;AAIA,QAAID,WAAJ,GAAkB;AACd,eAAOJ,YAAYQ,GAAZ,CAAgB,IAAhB,CAAP;AACH;;AAED;;;AAGA,QAAIC,UAAJ,GAAiB;AACb,eAAO,KAAKL,WAAL,CAAiBM,YAAjB,CAA8BX,cAA9B,EAA8C,IAA9C,MAAwD,IAA/D;AACH;;AAED;;;;;;;;;;;AAWA,QAAIU,UAAJ,CAAeE,KAAf,EAAsB;AAClB,aAAKP,WAAL,CAAiBE,GAAjB,CAAqBP,cAArB,EAAqCY,KAArC;AACH;;AAED;;;;AAIA,QAAIN,cAAJ,GAAqB;AACjB,eAAOJ,gBAAgBO,GAAhB,CAAoB,IAApB,CAAP;AACH;;AAED;;;AAGAA,QAAII,GAAJ,EAAS;AACL,YAAID,KAAJ;;AAEA,YAAI,KAAKF,UAAT,EAAqB;AACjB,gBAAI,CAAC,KAAKI,GAAL,CAASD,GAAT,CAAL,EAAoB;AAChBD,wBAAQG,QAAQF,GAAR,CAAR;;AAEA,qBAAKN,GAAL,CAASM,GAAT,EAAcD,KAAd;AACH,aAJD,MAIO;AACHA,wBAAQ,MAAMH,GAAN,CAAUI,GAAV,CAAR;AACH;AACJ,SARD,MAQO;AACH,mBAAOE,QAAQC,KAAR,CAAcH,GAAd,CAAP;;AAEAD,oBAAQG,QAAQF,GAAR,CAAR;AACH;;AAED,eAAO,KAAKP,cAAL,CAAoBW,OAApB,CAA4BL,KAA5B,EAAmCM,KAAK,CAAC,yBAAYA,CAAZ,CAAzC,CAAP;AACH;AAxEyB;;kBA2Eff,W","file":"ConfigCache.js","sourcesContent":["import {\n    isUndefined,\n} from 'lodash';\nimport ConfigStrategyList from './ConfigStrategyList';\nimport DEFAULT_RESOLVERS from './ConfigCacheResolvers';\n\n/**\n * @private\n * @type {String}\n */\nconst PERSISTENT_KEY = 'WEBPACK_CONFIG_CACHE';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst ENVIRONMENT = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst VALUE_RESOLVERS = new WeakMap();\n\n/**\n * Please set `WEBPACK_CONFIG_CACHE` environment variable to `false` to make it non persistent or just use {@link ConfigCache#persistent}\n * @class\n * @extends {Map}\n */\nclass ConfigCache extends Map {\n    /**\n     * @constructor\n     * @param {ConfigEnvironment} environment\n     * @param {Function[]} [valueResolvers]\n     */\n    constructor(environment, valueResolvers = DEFAULT_RESOLVERS) {\n        super();\n\n        ENVIRONMENT.set(this, environment);\n        VALUE_RESOLVERS.set(this, ConfigStrategyList.from(valueResolvers));\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigEnvironment}\n     */\n    get environment() {\n        return ENVIRONMENT.get(this);\n    }\n\n    /**\n     * @type {Boolean}\n     */\n    get persistent() {\n        return this.environment.getOrDefault(PERSISTENT_KEY, true) === true;\n    }\n\n    /**\n     * @example\n     * import {\n     *   cache\n     * } from 'webpack-config';\n     *\n     * cache.persistent = false;\n     * @example\n     * WEBPACK_CONFIG_CACHE=false ...\n     * @param {Boolean} value\n     */\n    set persistent(value) {\n        this.environment.set(PERSISTENT_KEY, value);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigStrategyList}\n     */\n    get valueResolvers() {\n        return VALUE_RESOLVERS.get(this);\n    }\n\n    /**\n     * @override\n     */\n    get(key) {\n        let value;\n\n        if (this.persistent) {\n            if (!this.has(key)) {\n                value = require(key);\n\n                this.set(key, value);\n            } else {\n                value = super.get(key);\n            }\n        } else {\n            delete require.cache[key];\n\n            value = require(key);\n        }\n\n        return this.valueResolvers.resolve(value, x => !isUndefined(x));\n    }\n}\n\nexport default ConfigCache;\n"]}